generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Schema for Individual Users
model User {
  id                  Int           @id @default(autoincrement())
  first_name          String
  last_name           String?
  email               String        @unique
  phone_number        String
  hashed_password     String
  profile_picture_url String?
  user_type           String?
  joined_at           String?
  updated_at          String?
  purchased_services  Service[]
  users_expenses      Expense[]
  users_income        Income[]
  users_savings_goals SavingsGoal[]
  user_budgets        Budget[]
  user_loans          Loan[]
}

// Prisma Schema for Organizations
model Organization {
  id             Int     @id @default(autoincrement())
  name           String
  short_code     String  @unique
  email          String
  contact_number String?
  proof_doc_url  String?
  address        String
  created_at     String?
  updated_at     String?
}

// Prisma Schema for Services
model Service {
  id           Int         @id @default(autoincrement())
  title        String
  price        Int
  type         String
  facilities   String?
  session_type SessionType
  created_at   String?
  updated_at   String?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

enum SessionType {
  Monthly
  Yearly
}

// Prisma Schema for Expenses
model Expense {
  id         Int     @id @default(autoincrement())
  title      String
  amount     Float
  category   String
  date       String
  created_at String?
  updated_at String?
  user_id    Int?

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Prisma Schema for Income
model Income {
  id         Int     @id @default(autoincrement())
  amount     Float
  source     String
  category   String
  notes      String?
  date       String
  created_at String?
  updated_at String?
  user_id    Int?
  user       User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Prisma Schema for Savings Goal
model SavingsGoal {
  id             Int     @id @default(autoincrement())
  title          String
  target_amount  Float
  current_amount Float   @default(0)
  start_date     String
  end_date       String?
  goal           String?
  status         String  @default("In Progress") // In Progress, Completed, Canceled
  created_at     String?
  updated_at     String?

  user_id Int?
  User    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Budget {
  id Int @id @default(autoincrement())

  title        String
  total_amount Float
  remaining    Float
  type         String // "Monthly" or "Annual"
  start_date   String
  end_date     String?
  created_at   String?
  updated_at   String?
  subEvents    SubBudget[]

  user_id Int?
  User    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SubBudget {
  id         Int    @id @default(autoincrement())
  title      String
  amount     Float
  date       String
  created_at String

  budget_id Int?
  budget    Budget? @relation(fields: [budget_id], references: [id], onDelete: Cascade)
}

model Loan {
  id                Int              @id @default(autoincrement())
  loan_type         String
  lender_name       String
  principal_amount  Float
  current_balance   Float
  interest_rate     Float
  start_date        String
  end_date          String?
  due_date          String?
  payment_frequency PaymentFrequency
  status            LoanStatus
  notes             String?
  created_at        String?
  updated_at        String?

  // Relations
  payments LoanPayment[]
  user_id  Int?
  User     User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model LoanPayment {
  id                Int      @id @default(autoincrement())
  payment_date      DateTime
  amount_paid       Float
  principal_paid    Float
  interest_paid     Float
  remaining_balance Float
  notes             String?
  createdAt         String?

  // Relations
  loan_id Int?
  Loan    Loan? @relation(fields: [loan_id], references: [id], onDelete: Cascade)

  @@index([loan_id])
}

// ENUMs
enum PaymentFrequency {
  Monthly
  BiWeekly
  Custom
}

enum LoanStatus {
  Active
  PaidOff
  Default
}
