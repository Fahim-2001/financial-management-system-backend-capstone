generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Schema for Individual Users
model IndividualUser {
  id                Int           @id @default(autoincrement())
  first_name        String        @db.VarChar(255)
  last_name         String?       @db.VarChar(255)
  email             String        @unique @db.VarChar(255)
  phone_number      String        @db.VarChar(255)
  hashed_password   String        @db.VarChar(255)
  role              String?       @db.VarChar(255)
  membership_type   String?       @db.VarChar(255)
  purchased_service Int?
  org_uid           String?       @db.VarChar(255)
  created_at        String?       @db.VarChar(255)
  last_updated_at   String?       @db.VarChar(255)
  created_by        String?       @db.VarChar(255)
  // Relations
  service           Service?      @relation(fields: [purchased_service], references: [id])
  organization      Organization? @relation(fields: [org_uid], references: [org_uid])
  roleType          Role?         @relation(fields: [role], references: [role])
}

// Prisma Schema for Organizations
model Organization {
  id             Int              @id @default(autoincrement())
  org_uid        String           @unique @db.VarChar(255)
  email          String           @unique
  phone_number   String
  address        String
  name           String
  // Relations
  IndividualUser IndividualUser[]
}

// Prisma Schema for Services
model Service {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  price           Int
  type            String           @db.VarChar(255)
  facilities      Json
  session_type    String           @db.VarChar(255)
  // Relations
  individualUsers IndividualUser[]
}

model Role {
  id                     Int              @id @default(autoincrement())
  role                   String           @unique @db.VarChar(255)
  authorized_departments String           @db.VarChar(255)
  // Relations
  individualUsers        IndividualUser[]
}
